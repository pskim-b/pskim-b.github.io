<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MapReduce on PS Developer Tech study</title>
    <link>/tags/mapreduce/</link>
    <description>Recent content in MapReduce on PS Developer Tech study</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 16 Jun 2017 00:00:00 +0000</lastBuildDate><atom:link href="/tags/mapreduce/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[MapReduce] Example of MapReduce</title>
      <link>/posts/bigdata/hadoop/20170616_mapreduce_example-of-mapreduce/</link>
      <pubDate>Fri, 16 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/posts/bigdata/hadoop/20170616_mapreduce_example-of-mapreduce/</guid>
      <description>하둡을 공부하기 시작하면서, 하둡을 한다는 것이 무엇을 의미하는것인지 잘 와닿지 않았다. 처음에는 일차원적으로 M/W로써의 일반적인 특성 (아키텍쳐를 이해하고 그것의 설정값들을 최적화 함으로써 성능을 극대화 시키는 것)을 생각하였다. 하지만 그것은 하둡의 주된 부분이 아니다. 하둡 기반의 프로그램을 작성한다는 것은 데이터에 따라 MapReduce를 적절히 구현하는 것이며, 이를 위해서 사전에 미리 &amp;lsquo;처리하고자 하는 데이터에 대한 이해&amp;rsquo;, &amp;lsquo;분석을 위한 기획&amp;rsquo;이 정확하게 이루어져야 한다. 그렇다면 MapReduce를 적절히 구현하는 것은 무엇일까? 여러가지 상황들을 살펴보자
1. 블로그 접속 수 집계 1) 문제상황 : 어떤 블로그 서비스에서 블로그 별 열람자 수를 확인하고자 한다.</description>
    </item>
    
  </channel>
</rss>
