<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>System Design on PS Developer Tech study</title>
    <link>/tags/system-design/</link>
    <description>Recent content in System Design on PS Developer Tech study</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="/tags/system-design/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Design] 분산 데이터 (2)</title>
      <link>/posts/book/data_intensive/20220214_05_replication_2/</link>
      <pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/book/data_intensive/20220214_05_replication_2/</guid>
      <description>지극히 주관적인 요약 리더 없는 복제 초기 복제 데이터 시스템은 대부분 리더가 없었다. 리더 없는 복제는 아마존이 내부 Dynamo 시스템에서 사용한 후 다시 DB용 아키텍쳐로 유행했다. 리악, 카산드라, 볼드모트는 다이나모에서 영감을 얻은 리더 없는 복제 모델의 오픈소서 데이터 스토어로, 이런 종류의 데이터베이스를 다이나모 스타일이라 한다.
리더 없는 복제 구현은 다음과 같은 방식으로 구성된다.
 클라이언트가 여러 복제 서버에 쓰기를 직접 전송 또는 코디네이터 노드가 내부적으로 복제 작업을 수행  이 두 경우 모두 리더가 있는 복제와 다르게 특정한 순서로 쓰기작업을 수행하지 않는다.</description>
    </item>
    
    <item>
      <title>[Design] 분산 데이터 (1)</title>
      <link>/posts/book/data_intensive/20220214_05_replication/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/book/data_intensive/20220214_05_replication/</guid>
      <description>지극히 주관적인 요약 Part 2. 분산 데이터 분산 데이터베이스를 통한 이점
 확장성 : 데이터 볼륨, 일기/쓰기 부하를 여러 장비로 분배 내결함성/고가용성 : 장비 하나 또는 특정 단위(네트워크, 데이터센터 등)가 죽더라도 어플리케이션이 계속 동작할 수 있도록 서비스 제공 지연 시간 : 전세계에 사용자가 있다면 지리적으로 가까운 곳의 DC에서 서비스를 제공하기 위해 다양한 곳에 서버를 두고 서비스  공유 메모리 아키텍쳐 : 여러 개의 리소스들을 하나의 운영체제로 결합하여 관리한다. 모든 구성요소를 단일 장비처럼 관리할 수 있다.</description>
    </item>
    
    <item>
      <title>[Design] 데이터 모델과 쿼리 </title>
      <link>/posts/book/data_intensive/20220109_02_data_modeling_and_query/</link>
      <pubDate>Sun, 09 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>/posts/book/data_intensive/20220109_02_data_modeling_and_query/</guid>
      <description>지극히 주관적인 요약 1. 데이터 모델 중요성 데이터 모델은 소프트웨어 개발에서 제일 중요한 부분 중 하나이다. 왜냐하면 데이터 모델은 소프트웨어가 어떻게 작성됐는지 뿐만 아니라 해결하려는 문제를 어떻게 생각하는지에 대해서도 지대한 영향을 미치기 때문이다.
데이터 모델은 여러 계층을 이루며 구성되는데 각 계층의 핵심적인 고민거리는 다음 하위 계층(down stream)을 위해 데이터를 어떻게 전달해야 하는지이다. 이는 단순히 application과 persistence 사이 뿐만이 아니라 application 내에서 또는 application 간에도 고민이 되어야 한다.
각 계층은 명확한 데이터 모델을 제공해 하위 계층에게 복잡성을 숨긴다.</description>
    </item>
    
  </channel>
</rss>
